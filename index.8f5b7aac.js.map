{"mappings":"C,A,WIAO,SAAS,EAAqB,CAAG,CAAE,CAAG,EACrC,CAAA,AAAO,MAAP,GAAe,EAAM,EAAI,MAAM,AAAN,GAAQ,CAAA,EAAM,EAAI,MAAM,AAAN,EAE/C,IAAK,IAAI,EAAI,EAAG,EAAO,AAAI,MAAM,GAAM,EAAI,EAAK,IAAK,CAAI,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAErE,OAAO,CACX,CFDO,SAAS,EAAqB,CAAG,EACpC,OAAO,ACJJ,SAA8B,CAAG,EACpC,GAAI,MAAM,OAAO,CAAC,GAAM,OAAO,AAAA,EAAqB,EACxD,EDEgC,IAAQ,AGNjC,SAA4B,CAAI,EACnC,GAAI,AAAkB,aAAlB,OAAO,QAA0B,AAAyB,MAAzB,CAAI,CAAC,OAAO,QAAQ,CAAC,EAAY,AAAsB,MAAtB,CAAI,CAAC,aAAa,CACpF,OAAO,MAAM,IAAI,CAAC,EAE1B,EHE2D,IAAQ,AKJ5D,SAAwC,CAAC,CAAE,CAAM,EACpD,GAAK,GACL,GAAI,AAAa,UAAb,OAAO,EAAgB,OAAO,AAAA,EAAqB,EAFT,KAAA,GAI9C,IAAI,EAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,EAAG,IAGnD,GADU,WAAN,GAAkB,EAAE,WAAW,EAAE,CAAA,EAAI,EAAE,WAAW,CAAC,IAAI,AAAJ,EACnD,AAAM,QAAN,GAAe,AAAM,QAAN,EAAa,OAAO,MAAM,IAAI,CAAC,GAClD,GAAI,AAAM,cAAN,GAAqB,2CAA2C,IAAI,CAAC,GAAI,OAAO,AAAA,EAAqB,EAR3D,KAAA,GASlD,ELLkG,IAAQ,AINnG,WACH,MAAM,AAAI,UAAU,uIACxB,GJKA,CDDA,SAAS,gBAAgB,CAAC,mBAAoB,WA2BnC,IAlBL,EAkBK,EAAT,WACE,EAAQ,MAAM,GACX,IAAI,GACJ,GAAG,CAAC,WAAM,OAAA,MAAM,GAAM,IAAI,CAAC,E,GAE9B,EAAQ,EACR,IAEA,EAAY,KAAK,CAAC,OAAO,CAAG,OAC5B,EAAc,KAAK,CAAC,OAAO,CAAG,eAC9B,EAAa,KAAK,CAAC,OAAO,CAAG,OAE7B,EAAM,OAAO,CAAC,SAAC,CAAf,EACE,EAAK,SAAS,CAAG,GACjB,EAAK,KAAK,CAAC,eAAe,CAAG,SAC/B,GAEA,IACA,IACA,GACF,EAES,EAAT,WAGE,IAAK,IAFC,EAAa,EAAE,CAEZ,EAAI,EAAG,EAAI,EAAM,IACxB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACJ,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EACb,EAAW,IAAI,CAAC,CAAE,EAAG,EAAG,EAAG,CAAE,GAKnC,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IACE,EAAA,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,CADnD,EACN,EADM,CAAA,CAAG,EACT,EADS,CAAX,AAGA,CAAA,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAC1C,CACF,EAES,EAAT,WACE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IAAK,CAC7B,IAAM,EAAQ,CAAK,CAAC,EAAE,CAAC,EAAE,CACnB,EAAO,CAAK,CAAC,EAAI,EAAO,EAAE,AAEhC,CAAA,EAAK,WAAW,CAAG,AAAU,IAAV,EAAc,GAAK,EACtC,EAAK,KAAK,CAAC,eAAe,CAAG,EAAa,EAC5C,CAEJ,EAES,EAAT,WACE,EAAa,WAAW,CAAG,CAC7B,EAES,EAAT,WACE,IACA,IACA,IACA,GACF,EAES,EAAT,SAAsB,CAAK,EAgBzB,MAAO,AAfQ,CAAA,CACb,EAAG,UACH,EAAG,UACH,EAAG,UACH,EAAG,UACH,GAAI,UACJ,GAAI,UACJ,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,KAAM,UACN,KAAM,SACR,CAAA,CAEa,CAAC,EAAM,EAAI,SAC1B,EAES,EAAT,SAAuB,CAAC,EACtB,OAAQ,EAAE,GAAG,EACX,IAAK,UACL,IAAK,IACH,IACA,KACF,KAAK,YACL,IAAK,IACH,IACA,KACF,KAAK,YACL,IAAK,IACH,IACA,KACF,KAAK,aACL,IAAK,IACH,GAEJ,CACF,EAIS,EAAT,WACE,SAAS,mBAAmB,CAAC,UAAW,EAC1C,EAES,EAAT,SAAe,CAAK,EAAE,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,CAChB,EAAW,EAAW,AAAA,EAAG,GAAO,OAAO,GAAM,AAAA,EAAG,GAEpD,EAAW,EAAS,MAAM,CAAC,SAAC,CAA5B,EAAoC,OAAA,AAAQ,IAAR,C,GAIpC,IAAK,IAFD,EAAS,EAEJ,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,IACnC,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,GACjC,CAAQ,CAAC,EAAE,EAAI,EACf,CAAQ,CAAC,EAAI,EAAE,CAAG,EAClB,GAAU,CAAQ,CAAC,EAAE,EAMzB,IAFA,EAAW,EAAS,MAAM,CAAC,SAAC,CAA5B,EAAoC,OAAA,AAAQ,IAAR,C,GAE7B,EAAS,MAAM,CAAG,GACvB,EAAS,IAAI,CAAC,GAOhB,OAJI,GACF,CAAA,EAAW,EAAS,OAAO,EAD7B,EAIO,CAAE,SAAA,EAAU,OAAA,CAAO,CAC5B,EAES,EAAT,WAIE,IAAK,IAHC,EAAgB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAC5C,EAAQ,CAAA,EAEH,EAAI,EAAG,EAAI,EAAM,KAA1B,A,S,C,EACE,IAAM,EAAM,CAAK,CAAC,EAAE,CACd,EAAS,EAAM,GACf,EAAS,EAAO,QAAQ,CAE1B,EAAO,IAAI,CAAC,SAAC,CAAA,CAAK,CAAtB,EAAgC,OAAA,IAAQ,CAAG,CAAC,EAAM,AAChD,IAAA,CAAA,EAAQ,CAAA,CAAR,EAEF,CAAK,CAAC,EAAE,CAAG,EACX,GAAS,EAAO,MAAM,AACxB,EAVA,GAYI,GAAS,KAAK,SAAS,CAAC,KAAmB,KAAK,SAAS,CAAC,IAC5D,GAEJ,EAES,EAAT,WAIE,IAAK,IAHC,EAAgB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAC5C,EAAQ,CAAA,EAEH,EAAI,EAAG,EAAI,EAAM,KAA1B,A,S,C,EACE,IAAM,EAAM,CAAK,CAAC,EAAE,CACd,EAAS,EAAM,EAAK,CAAA,GACpB,EAAS,EAAO,QAAQ,CAE1B,EAAO,IAAI,CAAC,SAAC,CAAA,CAAK,CAAtB,EAAgC,OAAA,IAAQ,CAAG,CAAC,EAAM,AAChD,IAAA,CAAA,EAAQ,CAAA,CAAR,EAEF,CAAK,CAAC,EAAE,CAAG,EACX,GAAS,EAAO,MAAM,AACxB,EAVA,GAYI,GAAS,KAAK,SAAS,CAAC,KAAmB,KAAK,SAAS,CAAC,IAC5D,GAEJ,EAES,EAAT,WAIE,IAAK,I,E,S,C,EACH,IAAM,EAAS,EAAM,GAAG,CAAC,SAAC,CAA1B,EAAkC,OAAA,CAAG,CAAC,EAAE,A,GAClC,EAAS,EAAM,GACf,EAAY,EAAO,QAAQ,CAE7B,EAAU,IAAI,CAAC,SAAC,CAAA,CAAK,CAAzB,EAAmC,OAAA,IAAQ,CAAM,CAAC,EAAM,AACtD,IAAA,CAAA,EAAQ,CAAA,CAAR,EAGF,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAS,CAAC,EAAE,CAE5B,GAAS,EAAO,MAAM,AACxB,EAhBM,EAAgB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAC5C,EAAQ,CAAA,EAEH,EAAI,EAAG,EAAI,EAAM,IAA1B,EAAA,GAeI,GAAS,KAAK,SAAS,CAAC,KAAmB,KAAK,SAAS,CAAC,IAC5D,GAEJ,EAES,EAAT,WAIE,IAAK,I,E,S,C,EACH,IAAM,EAAS,EAAM,GAAG,CAAC,SAAC,CAA1B,EAAkC,OAAA,CAAG,CAAC,EAAE,A,GAClC,EAAS,EAAM,EAAQ,CAAA,GACvB,EAAY,EAAO,QAAQ,CAE7B,EAAU,IAAI,CAAC,SAAC,CAAA,CAAK,CAAzB,EAAmC,OAAA,IAAQ,CAAM,CAAC,EAAM,AACtD,IAAA,CAAA,EAAQ,CAAA,CAAR,EAGF,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAS,CAAC,EAAE,CAE5B,GAAS,EAAO,MAAM,AACxB,EAhBM,EAAgB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAC5C,EAAQ,CAAA,EAEH,EAAI,EAAG,EAAI,EAAM,IAA1B,EAAA,GAeI,GAAS,KAAK,SAAS,CAAC,KAAmB,KAAK,SAAS,CAAC,IAC5D,GAEJ,EAES,EAAT,WACM,IACF,EAAY,KAAK,CAAC,OAAO,CAAG,eACnB,MACT,EAAW,KAAK,CAAC,OAAO,CAAG,eAE3B,IAEJ,EAES,EAAT,WACE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,GAAoB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EAIX,EAAI,EAAO,GAAK,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAE,CAAC,EAAI,EAAE,EAI/C,EAAI,EAAO,GAAK,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAPjD,MAAO,CAAA,EAab,MAAO,CAAA,CACT,EAES,EAAT,WACE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,GAAI,AAAgB,OAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CACb,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EAtSM,EAAc,SAAS,cAAc,CAAC,gBACtC,EAAgB,SAAS,cAAc,CAAC,kBACxC,EAAe,SAAS,cAAc,CAAC,SACvC,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAO,EAET,EAAQ,EAEZ,EAAY,gBAAgB,CAAC,QAAS,GACtC,EAAc,gBAAgB,CAAC,QAE/B,WACkB,QACd,2EAIA,EAAY,KAAK,CAAC,OAAO,CAAG,OAC5B,EAAW,KAAK,CAAC,OAAO,CAAG,OAC3B,IAEJ,GA0GA,SAAS,gBAAgB,CAAC,UAAW,EAqKvC,E","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var restart = function restart() {\n        var newGame = confirm(\"Are you sure you want to start a new game? All progress will be lost.\");\n        if (newGame) {\n            messageLose.style.display = \"none\";\n            messageWin.style.display = \"none\";\n            start();\n        }\n    };\n    var start = function start() {\n        board = Array(size).fill().map(function() {\n            return Array(size).fill(0);\n        });\n        score = 0;\n        getScore();\n        startButton.style.display = \"none\";\n        restartButton.style.display = \"inline-block\";\n        messageFirst.style.display = \"none\";\n        cells.forEach(function(cell) {\n            cell.innerHTML = \"\";\n            cell.style.backgroundColor = \"#cdc1b4\";\n        });\n        addRandomTile();\n        addRandomTile();\n        updateBoard();\n    };\n    var addRandomTile = function addRandomTile() {\n        var emptyCells = [];\n        for(var i = 0; i < size; i++){\n            for(var j = 0; j < size; j++)if (board[i][j] === 0) emptyCells.push({\n                x: i,\n                y: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], x = _emptyCells_Math_floor.x, y = _emptyCells_Math_floor.y;\n            board[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    };\n    var updateBoard = function updateBoard() {\n        for(var i = 0; i < size; i++)for(var j = 0; j < size; j++){\n            var value = board[i][j];\n            var cell = cells[i * size + j];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.style.backgroundColor = getTileColor(value);\n        }\n    };\n    var getScore = function getScore() {\n        scoreDisplay.textContent = score;\n    };\n    var updateGame = function updateGame() {\n        addRandomTile();\n        updateBoard();\n        checkGameOver();\n        getScore();\n    };\n    var getTileColor = function getTileColor(value) {\n        var colors = {\n            0: \"#cdc1b4\",\n            2: \"#eee4da\",\n            4: \"#ede0c8\",\n            8: \"#f2b179\",\n            16: \"#f59563\",\n            32: \"#f67c5f\",\n            64: \"#f65e3b\",\n            128: \"#edcf72\",\n            256: \"#edcc61\",\n            512: \"#edc850\",\n            1024: \"#edc53f\",\n            2048: \"#edc22e\"\n        };\n        return colors[value] || \"#3c3a32\";\n    };\n    var handleKeyDown = function handleKeyDown(e) {\n        switch(e.key){\n            case \"ArrowUp\":\n            case \"w\":\n                moveUp();\n                break;\n            case \"ArrowDown\":\n            case \"s\":\n                moveDown();\n                break;\n            case \"ArrowLeft\":\n            case \"a\":\n                moveLeft();\n                break;\n            case \"ArrowRight\":\n            case \"d\":\n                moveRight();\n                break;\n        }\n    };\n    var removeKeydownEventListener = function removeKeydownEventListener() {\n        document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n    var slide = function slide(array) {\n        var reverse = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        var newArray = reverse ? (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(array).reverse() : (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(array);\n        newArray = newArray.filter(function(val) {\n            return val !== 0;\n        });\n        var points = 0;\n        for(var i = 0; i < newArray.length - 1; i++)if (newArray[i] === newArray[i + 1]) {\n            newArray[i] *= 2;\n            newArray[i + 1] = 0;\n            points += newArray[i];\n        }\n        newArray = newArray.filter(function(val) {\n            return val !== 0;\n        });\n        while(newArray.length < size)newArray.push(0);\n        if (reverse) newArray = newArray.reverse();\n        return {\n            newArray: newArray,\n            points: points\n        };\n    };\n    var moveLeft = function moveLeft() {\n        var _loop = function(i) {\n            var row = board[i];\n            var result = slide(row);\n            var newRow = result.newArray;\n            if (newRow.some(function(val, index) {\n                return val !== row[index];\n            })) moved = true;\n            board[i] = newRow;\n            score += result.points;\n        };\n        var originalBoard = JSON.parse(JSON.stringify(board));\n        var moved = false;\n        for(var i = 0; i < size; i++)_loop(i);\n        if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) updateGame();\n    };\n    var moveRight = function moveRight() {\n        var _loop = function(i) {\n            var row = board[i];\n            var result = slide(row, true);\n            var newRow = result.newArray;\n            if (newRow.some(function(val, index) {\n                return val !== row[index];\n            })) moved = true;\n            board[i] = newRow;\n            score += result.points;\n        };\n        var originalBoard = JSON.parse(JSON.stringify(board));\n        var moved = false;\n        for(var i = 0; i < size; i++)_loop(i);\n        if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) updateGame();\n    };\n    var moveUp = function moveUp() {\n        var _loop = function(j) {\n            var column = board.map(function(row) {\n                return row[j];\n            });\n            var result = slide(column);\n            var newColumn = result.newArray;\n            if (newColumn.some(function(val, index) {\n                return val !== column[index];\n            })) moved = true;\n            for(var i = 0; i < size; i++)board[i][j] = newColumn[i];\n            score += result.points;\n        };\n        var originalBoard = JSON.parse(JSON.stringify(board));\n        var moved = false;\n        for(var j = 0; j < size; j++)_loop(j);\n        if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) updateGame();\n    };\n    var moveDown = function moveDown() {\n        var _loop = function(j) {\n            var column = board.map(function(row) {\n                return row[j];\n            });\n            var result = slide(column, true);\n            var newColumn = result.newArray;\n            if (newColumn.some(function(val, index) {\n                return val !== column[index];\n            })) moved = true;\n            for(var i = 0; i < size; i++)board[i][j] = newColumn[i];\n            score += result.points;\n        };\n        var originalBoard = JSON.parse(JSON.stringify(board));\n        var moved = false;\n        for(var j = 0; j < size; j++)_loop(j);\n        if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) updateGame();\n    };\n    var checkGameOver = function checkGameOver() {\n        if (isGameOver()) messageLose.style.display = \"inline-block\";\n        else if (isGameWon()) {\n            messageWin.style.display = \"inline-block\";\n            removeKeydownEventListener();\n        }\n    };\n    var isGameOver = function isGameOver() {\n        for(var i = 0; i < size; i++)for(var j = 0; j < size; j++){\n            if (board[i][j] === 0) return false;\n            if (j < size - 1 && board[i][j] === board[i][j + 1]) return false;\n            if (i < size - 1 && board[i][j] === board[i + 1][j]) return false;\n        }\n        return true;\n    };\n    var isGameWon = function isGameWon() {\n        for(var i = 0; i < size; i++)for(var j = 0; j < size; j++){\n            if (board[i][j] === 2048) return true;\n        }\n        return false;\n    };\n    var startButton = document.getElementById(\"start-button\");\n    var restartButton = document.getElementById(\"restart-button\");\n    var scoreDisplay = document.getElementById(\"score\");\n    var cells = document.querySelectorAll(\".field-cell\");\n    var messageWin = document.querySelector(\".message-win\");\n    var messageLose = document.querySelector(\".message-lose\");\n    var messageFirst = document.querySelector(\".message-start\");\n    var size = 4;\n    var board;\n    var score = 0;\n    startButton.addEventListener(\"click\", start);\n    restartButton.addEventListener(\"click\", restart);\n    document.addEventListener(\"keydown\", handleKeyDown);\n});\n\n})();\n//# sourceMappingURL=index.8f5b7aac.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.getElementById('start-button');\n  const restartButton = document.getElementById('restart-button');\n  const scoreDisplay = document.getElementById('score');\n  const cells = document.querySelectorAll('.field-cell');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n  const messageFirst = document.querySelector('.message-start');\n  const size = 4;\n  let board;\n  let score = 0;\n\n  startButton.addEventListener('click', start);\n  restartButton.addEventListener('click', restart);\n\n  function restart() {\n    const newGame = confirm(\n      'Are you sure you want to start a new game? All progress will be lost.',\n    );\n\n    if (newGame) {\n      messageLose.style.display = 'none';\n      messageWin.style.display = 'none';\n      start();\n    }\n  }\n\n  function start() {\n    board = Array(size)\n      .fill()\n      .map(() => Array(size).fill(0));\n\n    score = 0;\n    getScore();\n\n    startButton.style.display = 'none';\n    restartButton.style.display = 'inline-block';\n    messageFirst.style.display = 'none';\n\n    cells.forEach((cell) => {\n      cell.innerHTML = '';\n      cell.style.backgroundColor = '#cdc1b4';\n    });\n\n    addRandomTile();\n    addRandomTile();\n    updateBoard();\n  }\n\n  function addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === 0) {\n          emptyCells.push({ x: i, y: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { x, y } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  function updateBoard() {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        const value = board[i][j];\n        const cell = cells[i * size + j];\n\n        cell.textContent = value === 0 ? '' : value;\n        cell.style.backgroundColor = getTileColor(value);\n      }\n    }\n  }\n\n  function getScore() {\n    scoreDisplay.textContent = score;\n  }\n\n  function updateGame() {\n    addRandomTile();\n    updateBoard();\n    checkGameOver();\n    getScore();\n  }\n\n  function getTileColor(value) {\n    const colors = {\n      0: '#cdc1b4',\n      2: '#eee4da',\n      4: '#ede0c8',\n      8: '#f2b179',\n      16: '#f59563',\n      32: '#f67c5f',\n      64: '#f65e3b',\n      128: '#edcf72',\n      256: '#edcc61',\n      512: '#edc850',\n      1024: '#edc53f',\n      2048: '#edc22e',\n    };\n\n    return colors[value] || '#3c3a32';\n  }\n\n  function handleKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'w':\n        moveUp();\n        break;\n      case 'ArrowDown':\n      case 's':\n        moveDown();\n        break;\n      case 'ArrowLeft':\n      case 'a':\n        moveLeft();\n        break;\n      case 'ArrowRight':\n      case 'd':\n        moveRight();\n        break;\n    }\n  }\n\n  document.addEventListener('keydown', handleKeyDown);\n\n  function removeKeydownEventListener() {\n    document.removeEventListener('keydown', handleKeyDown);\n  }\n\n  function slide(array, reverse = false) {\n    let newArray = reverse ? [...array].reverse() : [...array];\n\n    newArray = newArray.filter((val) => val !== 0);\n\n    let points = 0;\n\n    for (let i = 0; i < newArray.length - 1; i++) {\n      if (newArray[i] === newArray[i + 1]) {\n        newArray[i] *= 2;\n        newArray[i + 1] = 0;\n        points += newArray[i];\n      }\n    }\n\n    newArray = newArray.filter((val) => val !== 0);\n\n    while (newArray.length < size) {\n      newArray.push(0);\n    }\n\n    if (reverse) {\n      newArray = newArray.reverse();\n    }\n\n    return { newArray, points };\n  }\n\n  function moveLeft() {\n    const originalBoard = JSON.parse(JSON.stringify(board));\n    let moved = false;\n\n    for (let i = 0; i < size; i++) {\n      const row = board[i];\n      const result = slide(row);\n      const newRow = result.newArray;\n\n      if (newRow.some((val, index) => val !== row[index])) {\n        moved = true;\n      }\n      board[i] = newRow;\n      score += result.points;\n    }\n\n    if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) {\n      updateGame();\n    }\n  }\n\n  function moveRight() {\n    const originalBoard = JSON.parse(JSON.stringify(board));\n    let moved = false;\n\n    for (let i = 0; i < size; i++) {\n      const row = board[i];\n      const result = slide(row, true);\n      const newRow = result.newArray;\n\n      if (newRow.some((val, index) => val !== row[index])) {\n        moved = true;\n      }\n      board[i] = newRow;\n      score += result.points;\n    }\n\n    if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) {\n      updateGame();\n    }\n  }\n\n  function moveUp() {\n    const originalBoard = JSON.parse(JSON.stringify(board));\n    let moved = false;\n\n    for (let j = 0; j < size; j++) {\n      const column = board.map((row) => row[j]);\n      const result = slide(column);\n      const newColumn = result.newArray;\n\n      if (newColumn.some((val, index) => val !== column[index])) {\n        moved = true;\n      }\n\n      for (let i = 0; i < size; i++) {\n        board[i][j] = newColumn[i];\n      }\n      score += result.points;\n    }\n\n    if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) {\n      updateGame();\n    }\n  }\n\n  function moveDown() {\n    const originalBoard = JSON.parse(JSON.stringify(board));\n    let moved = false;\n\n    for (let j = 0; j < size; j++) {\n      const column = board.map((row) => row[j]);\n      const result = slide(column, true);\n      const newColumn = result.newArray;\n\n      if (newColumn.some((val, index) => val !== column[index])) {\n        moved = true;\n      }\n\n      for (let i = 0; i < size; i++) {\n        board[i][j] = newColumn[i];\n      }\n      score += result.points;\n    }\n\n    if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) {\n      updateGame();\n    }\n  }\n\n  function checkGameOver() {\n    if (isGameOver()) {\n      messageLose.style.display = 'inline-block';\n    } else if (isGameWon()) {\n      messageWin.style.display = 'inline-block';\n\n      removeKeydownEventListener();\n    }\n  }\n\n  function isGameOver() {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === 0) {\n          return false;\n        }\n\n        if (j < size - 1 && board[i][j] === board[i][j + 1]) {\n          return false;\n        }\n\n        if (i < size - 1 && board[i][j] === board[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function isGameWon() {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n});\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","document","addEventListener","board","start","size","fill","map","score","getScore","startButton","style","display","restartButton","messageFirst","cells","forEach","cell","innerHTML","backgroundColor","addRandomTile","updateBoard","emptyCells","j","push","x","y","_emptyCells_Math_floor","Math","floor","random","value","textContent","getTileColor","scoreDisplay","updateGame","checkGameOver","colors","handleKeyDown","e","key","moveUp","moveDown","moveLeft","moveRight","removeKeydownEventListener","removeEventListener","slide","array","reverse","arguments","newArray","filter","val","points","originalBoard","JSON","parse","stringify","moved","_loop","row","result","newRow","some","index","column","newColumn","isGameOver","messageLose","isGameWon","messageWin","getElementById","querySelectorAll","querySelector","confirm"],"version":3,"file":"index.8f5b7aac.js.map"}