{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["var $09e991522ca7e64e$exports = {};\n\"use strict\";\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const startButton = document.getElementById(\"start-button\");\n    const restartButton = document.getElementById(\"restart-button\");\n    const scoreDisplay = document.getElementById(\"score\");\n    const cells = document.querySelectorAll(\".field-cell\");\n    const messageWin = document.querySelector(\".message-win\");\n    const messageLose = document.querySelector(\".message-lose\");\n    const messageFirst = document.querySelector(\".message-start\");\n    const size = 4;\n    let board;\n    let score = 0;\n    startButton.addEventListener(\"click\", start);\n    restartButton.addEventListener(\"click\", restart);\n    function restart() {\n        const newGame = confirm(\"Are you sure you want to start a new game? All progress will be lost.\");\n        if (newGame) {\n            messageLose.style.display = \"none\";\n            messageWin.style.display = \"none\";\n            start();\n        }\n    }\n    function start() {\n        board = Array(size).fill().map(()=>Array(size).fill(0));\n        score = 0;\n        getScore();\n        startButton.style.display = \"none\";\n        restartButton.style.display = \"inline-block\";\n        messageFirst.style.display = \"none\";\n        cells.forEach((cell)=>{\n            cell.innerHTML = \"\";\n            cell.style.backgroundColor = \"#cdc1b4\";\n        });\n        addRandomTile();\n        addRandomTile();\n        updateBoard();\n    }\n    function addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < size; i++){\n            for(let j = 0; j < size; j++)if (board[i][j] === 0) emptyCells.push({\n                x: i,\n                y: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { x: x, y: y } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            board[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    function updateBoard() {\n        for(let i = 0; i < size; i++)for(let j = 0; j < size; j++){\n            const value = board[i][j];\n            const cell = cells[i * size + j];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.style.backgroundColor = getTileColor(value);\n        }\n    }\n    function getScore() {\n        scoreDisplay.textContent = score;\n    }\n    function updateGame() {\n        addRandomTile();\n        updateBoard();\n        checkGameOver();\n        getScore();\n    }\n    function getTileColor(value) {\n        const colors = {\n            0: \"#cdc1b4\",\n            2: \"#eee4da\",\n            4: \"#ede0c8\",\n            8: \"#f2b179\",\n            16: \"#f59563\",\n            32: \"#f67c5f\",\n            64: \"#f65e3b\",\n            128: \"#edcf72\",\n            256: \"#edcc61\",\n            512: \"#edc850\",\n            1024: \"#edc53f\",\n            2048: \"#edc22e\"\n        };\n        return colors[value] || \"#3c3a32\";\n    }\n    function handleKeyDown(e) {\n        switch(e.key){\n            case \"ArrowUp\":\n            case \"w\":\n                moveUp();\n                break;\n            case \"ArrowDown\":\n            case \"s\":\n                moveDown();\n                break;\n            case \"ArrowLeft\":\n            case \"a\":\n                moveLeft();\n                break;\n            case \"ArrowRight\":\n            case \"d\":\n                moveRight();\n                break;\n        }\n    }\n    document.addEventListener(\"keydown\", handleKeyDown);\n    function removeKeydownEventListener() {\n        document.removeEventListener(\"keydown\", handleKeyDown);\n    }\n    function slide(array, reverse = false) {\n        let newArray = reverse ? [\n            ...array\n        ].reverse() : [\n            ...array\n        ];\n        newArray = newArray.filter((val)=>val !== 0);\n        let points = 0;\n        for(let i = 0; i < newArray.length - 1; i++)if (newArray[i] === newArray[i + 1]) {\n            newArray[i] *= 2;\n            newArray[i + 1] = 0;\n            points += newArray[i];\n        }\n        newArray = newArray.filter((val)=>val !== 0);\n        while(newArray.length < size)newArray.push(0);\n        if (reverse) newArray = newArray.reverse();\n        return {\n            newArray: newArray,\n            points: points\n        };\n    }\n    function moveLeft() {\n        const originalBoard = JSON.parse(JSON.stringify(board));\n        let moved = false;\n        for(let i = 0; i < size; i++){\n            const row = board[i];\n            const result = slide(row);\n            const newRow = result.newArray;\n            if (newRow.some((val, index)=>val !== row[index])) moved = true;\n            board[i] = newRow;\n            score += result.points;\n        }\n        if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) updateGame();\n    }\n    function moveRight() {\n        const originalBoard = JSON.parse(JSON.stringify(board));\n        let moved = false;\n        for(let i = 0; i < size; i++){\n            const row = board[i];\n            const result = slide(row, true);\n            const newRow = result.newArray;\n            if (newRow.some((val, index)=>val !== row[index])) moved = true;\n            board[i] = newRow;\n            score += result.points;\n        }\n        if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) updateGame();\n    }\n    function moveUp() {\n        const originalBoard = JSON.parse(JSON.stringify(board));\n        let moved = false;\n        for(let j = 0; j < size; j++){\n            const column = board.map((row)=>row[j]);\n            const result = slide(column);\n            const newColumn = result.newArray;\n            if (newColumn.some((val, index)=>val !== column[index])) moved = true;\n            for(let i = 0; i < size; i++)board[i][j] = newColumn[i];\n            score += result.points;\n        }\n        if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) updateGame();\n    }\n    function moveDown() {\n        const originalBoard = JSON.parse(JSON.stringify(board));\n        let moved = false;\n        for(let j = 0; j < size; j++){\n            const column = board.map((row)=>row[j]);\n            const result = slide(column, true);\n            const newColumn = result.newArray;\n            if (newColumn.some((val, index)=>val !== column[index])) moved = true;\n            for(let i = 0; i < size; i++)board[i][j] = newColumn[i];\n            score += result.points;\n        }\n        if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) updateGame();\n    }\n    function checkGameOver() {\n        if (isGameOver()) messageLose.style.display = \"inline-block\";\n        else if (isGameWon()) {\n            messageWin.style.display = \"inline-block\";\n            removeKeydownEventListener();\n        }\n    }\n    function isGameOver() {\n        for(let i = 0; i < size; i++)for(let j = 0; j < size; j++){\n            if (board[i][j] === 0) return false;\n            if (j < size - 1 && board[i][j] === board[i][j + 1]) return false;\n            if (i < size - 1 && board[i][j] === board[i + 1][j]) return false;\n        }\n        return true;\n    }\n    function isGameWon() {\n        for(let i = 0; i < size; i++)for(let j = 0; j < size; j++){\n            if (board[i][j] === 2048) return true;\n        }\n        return false;\n    }\n});\n\n\n//# sourceMappingURL=index.b6bb5082.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.getElementById('start-button');\n  const restartButton = document.getElementById('restart-button');\n  const scoreDisplay = document.getElementById('score');\n  const cells = document.querySelectorAll('.field-cell');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n  const messageFirst = document.querySelector('.message-start');\n  const size = 4;\n  let board;\n  let score = 0;\n\n  startButton.addEventListener('click', start);\n  restartButton.addEventListener('click', restart);\n\n  function restart() {\n    const newGame = confirm(\n      'Are you sure you want to start a new game? All progress will be lost.',\n    );\n\n    if (newGame) {\n      messageLose.style.display = 'none';\n      messageWin.style.display = 'none';\n      start();\n    }\n  }\n\n  function start() {\n    board = Array(size)\n      .fill()\n      .map(() => Array(size).fill(0));\n\n    score = 0;\n    getScore();\n\n    startButton.style.display = 'none';\n    restartButton.style.display = 'inline-block';\n    messageFirst.style.display = 'none';\n\n    cells.forEach((cell) => {\n      cell.innerHTML = '';\n      cell.style.backgroundColor = '#cdc1b4';\n    });\n\n    addRandomTile();\n    addRandomTile();\n    updateBoard();\n  }\n\n  function addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === 0) {\n          emptyCells.push({ x: i, y: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { x, y } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  function updateBoard() {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        const value = board[i][j];\n        const cell = cells[i * size + j];\n\n        cell.textContent = value === 0 ? '' : value;\n        cell.style.backgroundColor = getTileColor(value);\n      }\n    }\n  }\n\n  function getScore() {\n    scoreDisplay.textContent = score;\n  }\n\n  function updateGame() {\n    addRandomTile();\n    updateBoard();\n    checkGameOver();\n    getScore();\n  }\n\n  function getTileColor(value) {\n    const colors = {\n      0: '#cdc1b4',\n      2: '#eee4da',\n      4: '#ede0c8',\n      8: '#f2b179',\n      16: '#f59563',\n      32: '#f67c5f',\n      64: '#f65e3b',\n      128: '#edcf72',\n      256: '#edcc61',\n      512: '#edc850',\n      1024: '#edc53f',\n      2048: '#edc22e',\n    };\n\n    return colors[value] || '#3c3a32';\n  }\n\n  function handleKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'w':\n        moveUp();\n        break;\n      case 'ArrowDown':\n      case 's':\n        moveDown();\n        break;\n      case 'ArrowLeft':\n      case 'a':\n        moveLeft();\n        break;\n      case 'ArrowRight':\n      case 'd':\n        moveRight();\n        break;\n    }\n  }\n\n  document.addEventListener('keydown', handleKeyDown);\n\n  function removeKeydownEventListener() {\n    document.removeEventListener('keydown', handleKeyDown);\n  }\n\n  function slide(array, reverse = false) {\n    let newArray = reverse ? [...array].reverse() : [...array];\n\n    newArray = newArray.filter((val) => val !== 0);\n\n    let points = 0;\n\n    for (let i = 0; i < newArray.length - 1; i++) {\n      if (newArray[i] === newArray[i + 1]) {\n        newArray[i] *= 2;\n        newArray[i + 1] = 0;\n        points += newArray[i];\n      }\n    }\n\n    newArray = newArray.filter((val) => val !== 0);\n\n    while (newArray.length < size) {\n      newArray.push(0);\n    }\n\n    if (reverse) {\n      newArray = newArray.reverse();\n    }\n\n    return { newArray, points };\n  }\n\n  function moveLeft() {\n    const originalBoard = JSON.parse(JSON.stringify(board));\n    let moved = false;\n\n    for (let i = 0; i < size; i++) {\n      const row = board[i];\n      const result = slide(row);\n      const newRow = result.newArray;\n\n      if (newRow.some((val, index) => val !== row[index])) {\n        moved = true;\n      }\n      board[i] = newRow;\n      score += result.points;\n    }\n\n    if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) {\n      updateGame();\n    }\n  }\n\n  function moveRight() {\n    const originalBoard = JSON.parse(JSON.stringify(board));\n    let moved = false;\n\n    for (let i = 0; i < size; i++) {\n      const row = board[i];\n      const result = slide(row, true);\n      const newRow = result.newArray;\n\n      if (newRow.some((val, index) => val !== row[index])) {\n        moved = true;\n      }\n      board[i] = newRow;\n      score += result.points;\n    }\n\n    if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) {\n      updateGame();\n    }\n  }\n\n  function moveUp() {\n    const originalBoard = JSON.parse(JSON.stringify(board));\n    let moved = false;\n\n    for (let j = 0; j < size; j++) {\n      const column = board.map((row) => row[j]);\n      const result = slide(column);\n      const newColumn = result.newArray;\n\n      if (newColumn.some((val, index) => val !== column[index])) {\n        moved = true;\n      }\n\n      for (let i = 0; i < size; i++) {\n        board[i][j] = newColumn[i];\n      }\n      score += result.points;\n    }\n\n    if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) {\n      updateGame();\n    }\n  }\n\n  function moveDown() {\n    const originalBoard = JSON.parse(JSON.stringify(board));\n    let moved = false;\n\n    for (let j = 0; j < size; j++) {\n      const column = board.map((row) => row[j]);\n      const result = slide(column, true);\n      const newColumn = result.newArray;\n\n      if (newColumn.some((val, index) => val !== column[index])) {\n        moved = true;\n      }\n\n      for (let i = 0; i < size; i++) {\n        board[i][j] = newColumn[i];\n      }\n      score += result.points;\n    }\n\n    if (moved && JSON.stringify(originalBoard) !== JSON.stringify(board)) {\n      updateGame();\n    }\n  }\n\n  function checkGameOver() {\n    if (isGameOver()) {\n      messageLose.style.display = 'inline-block';\n    } else if (isGameWon()) {\n      messageWin.style.display = 'inline-block';\n\n      removeKeydownEventListener();\n    }\n  }\n\n  function isGameOver() {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === 0) {\n          return false;\n        }\n\n        if (j < size - 1 && board[i][j] === board[i][j + 1]) {\n          return false;\n        }\n\n        if (i < size - 1 && board[i][j] === board[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function isGameWon() {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n});\n"],"names":["document","addEventListener","board","startButton","getElementById","restartButton","scoreDisplay","cells","querySelectorAll","messageWin","querySelector","messageLose","messageFirst","score","start","Array","fill","map","getScore","style","display","forEach","cell","innerHTML","backgroundColor","addRandomTile","updateBoard","emptyCells","i","j","push","x","y","length","Math","floor","random","value","textContent","colors","updateGame","isGameOver","size","isGameWon","removeEventListener","handleKeyDown","e","key","moveUp","originalBoard","JSON","parse","stringify","moved","column","row","result","slide","newColumn","newArray","some","val","index","points","moveDown","moveLeft","newRow","moveRight","array","reverse","filter","confirm"],"version":3,"file":"index.b6bb5082.js.map"}